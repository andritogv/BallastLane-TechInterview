@page "/prescriptions"
@using PrescriberPoint.Domain
@using PrescriberPoint.Business.ApiContract
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Prescriptions</PageTitle>

<h1>Prescriptions</h1>

<p>These are prescriptions.</p>

@if (_prescriptions == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Edit</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var prescription in _prescriptions)
            {
                <tr>
                    <td>@prescription.Name</td>
                    <td>@prescription.Description</td>
                    <td><button class="btn btn-primary" @onclick="@(() => Edit(@prescription.Id))">Edit</button></td>
                    <td><button class="btn btn-danger" @onclick="@(() => Delete(@prescription.Id))">Delete</button></td>
                </tr>
            }
        </tbody>
    </table>

    <br />

    <button class="btn btn-primary" @onclick='() => NavigationManager.NavigateTo("/editprescription")'>Add New</button>
}

@code {
    private List<Prescription> _prescriptions = new List<Prescription>();

    protected override async Task OnInitializedAsync()
    {
        _prescriptions = await Http.GetFromJsonAsync<List<Prescription>>("api/Prescriptions");
    }

    private void Edit(int prescriptionId)
    {
        NavigationManager.NavigateTo($"/editprescription/{prescriptionId}");
    }

    private async void Delete(int prescriptionId)
    {
        await Http.DeleteAsync($"api/Prescriptions/{prescriptionId}");
        _prescriptions.Remove(_prescriptions.First(p => p.Id == prescriptionId));
        StateHasChanged();
    }
}
